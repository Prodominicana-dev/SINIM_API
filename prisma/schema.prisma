generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ramis {
  id          Int     @id @default(autoincrement())
  countryId   Int
  productId   Int
  tradeAgreement String? // Acuerdo comercial
  tariffsImposed String? // Aranceles impuestos
  webResource String? // Recurso web
  technicalRequirements String? // Requisitos técnicos
  permitsCertifications String? // Permisos y certificaciones
  labelingCertifications String? // Etiquetado y certificaciones
  outputRequirement String? // Requisitos de salida
  importRequirement String? // Requisitos de importación
  date       DateTime? @default(now())
  status     String? @default("active")
  country     Country @relation(fields: [countryId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
}

model Country {
  id    Int     @id @default(autoincrement())
  name  String
  abbreviation String @unique
  continent String?
  group String?
  ramis Ramis[]
  suscriber_countries SuscriberToCountry[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  code        String
  date        DateTime? @default(now())
  oldID       Int? @unique
  ramis       Ramis[]
  suscriber_products  SuscriberToProduct[]
  status     String? @default("active")
}

model reservedDomains{
  id              Int     @id @default(autoincrement())
  name            String
  platform        String
  status     String? @default("active")
}

model Datamarket{
  id             Int     @id @default(autoincrement())
  title         String
  category      String
  url           String
  date          DateTime? @default(now())
  status     String? @default("active")
}

model Alerts{
  id             Int     @id @default(autoincrement())
  title          String // Titulo
  description    String? // Descripción
  category        String? // Categoría
  image           String? // Imagen
  date            DateTime? @default(now()) // Fecha de registro
  products        Json[] // Productos
  countries       Json[] // Países (ID)
  oldID           Int? // ID anterior
  platform      String // Plataforma
  status     String? @default("active")
  published       Boolean? @default(false) // Publicado
}

model Suscriber{
  id            Int    @id @default(autoincrement())
  email         String         
  name          String?         // Nombre y apellido
  platform      String        
  status        String?         @default("active")
  suscriber_countries SuscriberToCountry[]
  suscriber_products  SuscriberToProduct[]
}

model SuscriberToCountry {
  suscriberId Int
  countryId   Int
  suscriber Suscriber @relation(fields: [suscriberId], references: [id])
  country   Country   @relation(fields: [countryId] , references: [id])

  @@id([suscriberId, countryId])
}

model SuscriberToProduct {
  suscriberId Int
  productId   Int

  suscriber Suscriber @relation(fields: [suscriberId], references: [id])
  product   Product   @relation(fields: [productId] , references: [id])

  @@id([suscriberId, productId])
}

